#include<iostream>
using namespace std;
int m[10][10], s[10][10];
 void min_mul(int n, int d[])
 {
    int i,j,k,diagonal;
    int min, q;
    for(i=1; i<=n; i++)
 {
    for(j=1; j<=n; j++)
    {
       m[i][j] = 0;
    }
    //cout << endl;
 }
    for(diagonal = 1; diagonal <= n- 1; diagonal++)
    {
    for(i=1; i<= n-diagonal; i++)
    { 
      min = 9999;
      j = i + diagonal;  

      for(k=i; k<=j-1; k++)
      {
        q = m[i][k] + m[k+1][j] + (d[i-1] * d[k] * d[j]) ;
        if(q < min)
        {
            min = q;
            s[i][j] = k;
        }
      }
      m[i][j]= min;
    }
 }
 cout << " Matrix table"<<endl;
 for(i=1; i<=n; i++)
 {
    for(j=1; j<=n; j++)
    {
        cout << m[i][j] << "\t";
    }
    cout << endl;
 }
 cout << " S table which governs the order of matrices"<< endl;
 for(i=1; i<=n; i++)
 {
    for(j=1; j<=n; j++)
    {
        cout << s[i][j]<< "\t";
    }
    cout << endl;
 }

 }
int main()
{
     int n;
     cout << " Enter the no of matrices to multiply:"<< endl;
cin >> n;
int d[n+1];
cout << " Enter the orde of matrices to mutiply"<< endl;
for(int i=0; i<=n; i++)
{
    cin >> d[i];
}
// we have to find the min number of multiplication possible for given n matrices
min_mul(n, d);
}
